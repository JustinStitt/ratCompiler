Keyword => function
<Rat21F> ::= <Opt Function Definitions> # <Opt Declaration List> <Statement List> #
Keyword => function
<Opt Function Definitions> ::= <Function Definitions> | <Empty>
Keyword => function
<Function Definitions> ::= <Function> | <Function> <Function Definitions>
Keyword => function
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Keyword => function
Identifier => convert1x
Separator => (
Identifier => fahr
<Opt Parameter List> ::= <Parameter List> | <Empty>
Identifier => fahr
<Parameter List> ::= <Parameter> | <Parameter> , <Parameter List>
Identifier => fahr
<Parameter> ::= <IDs > <Qualifier>
Identifier => fahr
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => fahr
Keyword => integer
<Qualifier> ::= integer | boolean | real
Keyword => integer
Separator => )
<Parameter List> ::= <Parameter> | <Parameter> , <Parameter List>
Separator => )
Separator => {
<Opt Declaration List> ::= <Declaration List> | <Empty>
Separator => {
<Empty> ::= 
Separator => {
<Body> ::= { < Statement List> }
Separator => {
Keyword => return
<Statement List> ::= <Statement> | <Statement> <Statement List>
Keyword => return
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Keyword => return
<Return> ::= return ; | return <Expression> ;
Keyword => return
Integer => 5
<Expression> ::= <Term> <Expression_Prime>
Integer => 5
<Term> ::= <Factor> <Term_Prime>
Integer => 5
<Factor> ::= - <Primary> | <Primary>
Integer => 5
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Integer => 5
Operator => *
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Operator => *
Separator => (
<Factor> ::= - <Primary> | <Primary>
Separator => (
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Separator => (
Identifier => fahr
<Expression> ::= <Term> <Expression_Prime>
Identifier => fahr
<Term> ::= <Factor> <Term_Prime>
Identifier => fahr
<Factor> ::= - <Primary> | <Primary>
Identifier => fahr
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Identifier => fahr
Operator => -
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Operator => -
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Operator => -
Integer => 32
<Term> ::= <Factor> <Term_Prime>
Integer => 32
<Factor> ::= - <Primary> | <Primary>
Integer => 32
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Integer => 32
Separator => )
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Separator => )
<Factor> ::= - <Primary> | <Primary>
Separator => )
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Separator => )
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Separator => )
Operator => /
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Operator => /
Integer => 9
<Factor> ::= - <Primary> | <Primary>
Integer => 9
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Integer => 9
Separator => ;
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Separator => ;
<Factor> ::= - <Primary> | <Primary>
Separator => ;
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Separator => ;
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Separator => ;
Separator => }
<Statement List> ::= <Statement> | <Statement> <Statement List>
Separator => }
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Separator => }
Separator => #
<Function Definitions> ::= <Function> | <Function> <Function Definitions>
Separator => #
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Separator => #
Keyword => integer
<Opt Declaration List> ::= <Declaration List> | <Empty>
Keyword => integer
<Declaration List> := <Declaration> ; | <Declaration> ; <Declaration List>
Keyword => integer
<Declaration> ::= <Qualifier > <IDs>
Keyword => integer
<Qualifier> ::= integer | boolean | real
Keyword => integer
Identifier => low
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => low
Separator => ,
Identifier => high
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => high
Separator => ,
Identifier => step
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => step
Separator => ;
Keyword => get
<Statement List> ::= <Statement> | <Statement> <Statement List>
Keyword => get
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Keyword => get
<Scan> ::= get ( <IDs> );
Keyword => get
Separator => (
Identifier => low
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => low
Separator => ,
Identifier => high
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => high
Separator => ,
Identifier => step
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => step
Separator => )
Separator => ;
Keyword => while
<Statement List> ::= <Statement> | <Statement> <Statement List>
Keyword => while
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Keyword => while
<While> ::= while ( <Condition> ) <Statement>
Keyword => while
Separator => (
Identifier => low
<Condition> ::= <Expression> <Relop> <Expression>
Identifier => low
<Expression> ::= <Term> <Expression_Prime>
Identifier => low
<Term> ::= <Factor> <Term_Prime>
Identifier => low
<Factor> ::= - <Primary> | <Primary>
Identifier => low
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Identifier => low
Operator => <=
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Operator => <=
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Operator => <=
<Relop> ::= == | != | > | < | <= | =>
Operator => <=
Identifier => high
<Expression> ::= <Term> <Expression_Prime>
Identifier => high
<Term> ::= <Factor> <Term_Prime>
Identifier => high
<Factor> ::= - <Primary> | <Primary>
Identifier => high
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Identifier => high
Separator => )
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Separator => )
<Factor> ::= - <Primary> | <Primary>
Separator => )
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Separator => )
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Separator => )
Separator => {
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Separator => {
<Compound> ::= { <Statement List> }
Separator => {
Keyword => put
<Statement List> ::= <Statement> | <Statement> <Statement List>
Keyword => put
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Keyword => put
<Print> ::= put ( <Expression>);
Keyword => put
Separator => (
Identifier => low
<Expression> ::= <Term> <Expression_Prime>
Identifier => low
<Term> ::= <Factor> <Term_Prime>
Identifier => low
<Factor> ::= - <Primary> | <Primary>
Identifier => low
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Identifier => low
Separator => )
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Separator => )
<Factor> ::= - <Primary> | <Primary>
Separator => )
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Separator => )
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Separator => )
Separator => ;
Keyword => put
<Statement List> ::= <Statement> | <Statement> <Statement List>
Keyword => put
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Keyword => put
<Print> ::= put ( <Expression>);
Keyword => put
Separator => (
Identifier => convert1x
<Expression> ::= <Term> <Expression_Prime>
Identifier => convert1x
<Term> ::= <Factor> <Term_Prime>
Identifier => convert1x
<Factor> ::= - <Primary> | <Primary>
Identifier => convert1x
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Identifier => convert1x
Separator => (
Identifier => low
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => low
Separator => )
Separator => )
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Separator => )
<Factor> ::= - <Primary> | <Primary>
Separator => )
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Separator => )
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Separator => )
Separator => ;
Identifier => low
<Statement List> ::= <Statement> | <Statement> <Statement List>
Identifier => low
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Identifier => low
<Assign> ::= <Identifier> = <Expression> ;
Identifier => low
Operator => =
Identifier => low
<Expression> ::= <Term> <Expression_Prime>
Identifier => low
<Term> ::= <Factor> <Term_Prime>
Identifier => low
<Factor> ::= - <Primary> | <Primary>
Identifier => low
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Identifier => low
Operator => +
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Operator => +
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Operator => +
Identifier => step
<Term> ::= <Factor> <Term_Prime>
Identifier => step
<Factor> ::= - <Primary> | <Primary>
Identifier => step
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Identifier => step
Separator => ;
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Separator => ;
<Factor> ::= - <Primary> | <Primary>
Separator => ;
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Separator => ;
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Separator => ;
Separator => }
<Statement List> ::= <Statement> | <Statement> <Statement List>
Separator => }
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Separator => }
Separator => #
<Statement List> ::= <Statement> | <Statement> <Statement List>
Separator => #
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Separator => #

=================================================
|						|
|						|
|		Parsing Successful!		|
|  						|
|						|
=================================================
