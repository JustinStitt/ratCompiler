Keyword => function
<Rat21F> ::= <Opt Function Definitions> # <Opt Declaration List> <Statement List> #
Keyword => function
<Opt Function Definitions> ::= <Function Definitions> | <Empty>
Keyword => function
<Function Definitions> ::= <Function> | <Function> <Function Definitions>
Keyword => function
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Keyword => function
Identifier => sum
Separator => (
Identifier => abc
<Opt Parameter List> ::= <Parameter List> | <Empty>
Identifier => abc
<Parameter List> ::= <Parameter> | <Parameter> , <Parameter List>
Identifier => abc
<Parameter> ::= <IDs > <Qualifier>
Identifier => abc
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => abc
Separator => ,
Identifier => xyz
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => xyz
Keyword => integer
<Qualifier> ::= integer | boolean | real
Keyword => integer
Separator => )
<Parameter List> ::= <Parameter> | <Parameter> , <Parameter List>
Separator => )
Separator => {
<Opt Declaration List> ::= <Declaration List> | <Empty>
Separator => {
<Empty> ::= 
Separator => {
<Body> ::= { < Statement List> }
Separator => {
Keyword => return
<Statement List> ::= <Statement> | <Statement> <Statement List>
Keyword => return
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Keyword => return
<Return> ::= return ; | return <Expression> ;
Keyword => return
Identifier => abc
<Expression> ::= <Term> <Expression_Prime>
Identifier => abc
<Term> ::= <Factor> <Term_Prime>
Identifier => abc
<Factor> ::= - <Primary> | <Primary>
Identifier => abc
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Identifier => abc
Operator => +
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Operator => +
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Operator => +
Identifier => xyz
<Term> ::= <Factor> <Term_Prime>
Identifier => xyz
<Factor> ::= - <Primary> | <Primary>
Identifier => xyz
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Identifier => xyz
Separator => ;
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Separator => ;
<Factor> ::= - <Primary> | <Primary>
Separator => ;
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Separator => ;
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Separator => ;
Separator => }
<Statement List> ::= <Statement> | <Statement> <Statement List>
Separator => }
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Separator => }
Separator => #
<Function Definitions> ::= <Function> | <Function> <Function Definitions>
Separator => #
<Function> ::= function <Identifier> ( <Opt Parameter List> ) <Opt Declaration List> <Body>
Separator => #
Keyword => integer
<Opt Declaration List> ::= <Declaration List> | <Empty>
Keyword => integer
<Declaration List> := <Declaration> ; | <Declaration> ; <Declaration List>
Keyword => integer
<Declaration> ::= <Qualifier > <IDs>
Keyword => integer
<Qualifier> ::= integer | boolean | real
Keyword => integer
Identifier => t1
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => t1
Separator => ,
Identifier => t2
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => t2
Separator => ;
Identifier => t1
<Statement List> ::= <Statement> | <Statement> <Statement List>
Identifier => t1
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Identifier => t1
<Assign> ::= <Identifier> = <Expression> ;
Identifier => t1
Operator => =
Integer => 4
<Expression> ::= <Term> <Expression_Prime>
Integer => 4
<Term> ::= <Factor> <Term_Prime>
Integer => 4
<Factor> ::= - <Primary> | <Primary>
Integer => 4
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Integer => 4
Separator => ;
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Separator => ;
<Factor> ::= - <Primary> | <Primary>
Separator => ;
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Separator => ;
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Separator => ;
Identifier => t2
<Statement List> ::= <Statement> | <Statement> <Statement List>
Identifier => t2
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Identifier => t2
<Assign> ::= <Identifier> = <Expression> ;
Identifier => t2
Operator => =
Integer => 6
<Expression> ::= <Term> <Expression_Prime>
Integer => 6
<Term> ::= <Factor> <Term_Prime>
Integer => 6
<Factor> ::= - <Primary> | <Primary>
Integer => 6
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Integer => 6
Separator => ;
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Separator => ;
<Factor> ::= - <Primary> | <Primary>
Separator => ;
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Separator => ;
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Separator => ;
Keyword => put
<Statement List> ::= <Statement> | <Statement> <Statement List>
Keyword => put
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Keyword => put
<Print> ::= put ( <Expression>);
Keyword => put
Separator => (
Identifier => sum
<Expression> ::= <Term> <Expression_Prime>
Identifier => sum
<Term> ::= <Factor> <Term_Prime>
Identifier => sum
<Factor> ::= - <Primary> | <Primary>
Identifier => sum
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Identifier => sum
Separator => (
Identifier => t1
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => t1
Separator => ,
Identifier => t2
<IDs> ::= <Identifier> | <Identifier>, <IDs>
Identifier => t2
Separator => )
Separator => )
Term_Prime ::= * <Factor> <Term_Prime> | / <Factor> <Term_Prime> | <Factor>
Separator => )
<Factor> ::= - <Primary> | <Primary>
Separator => )
<Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
Separator => )
<Expression_Prime> ::= + <Term> <Expression_Prime> | - <Term> <Expression_Prime> | ε
Separator => )
Separator => ;
Separator => #
<Statement List> ::= <Statement> | <Statement> <Statement List>
Separator => #
<Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
Separator => #

=================================================
|						|
|						|
|		Parsing Successful!		|
|  						|
|						|
=================================================
